--pragma Source_Reference(2,"apq-sybase.ads-in");
-- $Id: apq-sybase.ads-in,v 1.24 2004/09/29 04:03:58 wwg Exp $
-- Copyright (c) 2003, Warren W. Gay VE3WWG
--
-- Licensed under the ACL (Ada Community License)
-- or
-- GNU Public License 2 (GPL2)
-- 
--     This program is free software; you can redistribute it and/or modify
--     it under the terms of the GNU General Public License as published by
--     the Free Software Foundation; either version 2 of the License, or
--     (at your option) any later version.
-- 
--     This program is distributed in the hope that it will be useful,
--     but WITHOUT ANY WARRANTY; without even the implied warranty of
--     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--     GNU General Public License for more details.
-- 
--     You should have received a copy of the GNU General Public License
--     along with this program; if not, write to the Free Software
--     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
--
-- ***********************************************************
-- WARNING: The APQ.Sybase package is generated. Apply changes
--          to input file apq-sybase.ads-in instead!!!!!!!!!!!
-- ***********************************************************

with Interfaces.C;

package APQ.Sybase is

   -- Sybase Linker Options

   --
   -- Results from a query execution :
   --
   type Result_Type is (
      Execution_Failed,                   -- ct_results() call failed
      No_Results,                         -- Command processed, but no results available
      Row_Results,                        -- Command processed, and row results exist for fetching
      Cursor_Results,                     -- Command processed, and cursor row results exist for fetching
      Info_Results,                       -- Command processed, but no row data, but info exists
      Compute_Results,                    -- Computed results
      Param_Results,                      -- Parameter results
      Status_Results                      -- Status results
   );
   for Result_Type use (
      Execution_Failed        => 0,
      No_Results              => 1,
      Row_Results             => 2,
      Cursor_Results          => 3,
      Info_Results            => 4,
      Compute_Results         => 5,
      Param_Results           => 6,
      Status_Results          => 7
   );
   for Result_Type'Size use 32;           -- Must be integer sized (see c_sybase.c)

   type Field_Type is (
      %type:Field_Type%
   );
   for Field_Type use (
      %for:Field_Type%
   );
   for Field_Type'Size use 32;

private

   No_Info : Exception;    -- No information to return

   Null_Row_ID : constant Row_ID_Type := 0;

   subtype U2_Type is Interfaces.C.Unsigned;
   subtype I1_Type is Interfaces.C.Signed_Char;
   subtype I2_Type is Interfaces.C.Short;
   subtype I4_Type is Interfaces.C.Int;
   type    I8_Type is range -2 ** 63 .. 2 ** 63 - 1;
   subtype R4_Type is Interfaces.C.C_Float;
   subtype R8_Type is Interfaces.C.Double;

   type Int_Type is range -2 ** 31 .. 2 ** 31 - 1;
   type Long_Type is range -2 ** 31 .. 2 ** 31 - 1;

   type Layer_Type is new Long_Type;
   type Origin_Type is new Long_Type;
   type Severity_Type is new Long_Type;
   type Message_Number_Type is new Long_Type;
   type State_Type is new Long_Type;
   type Line_Type is new Long_Type;

   type Sy_Cancel_Type is (
      Cancel_Failed,
      Cancel_Succeeded,
      Cancel_With_Open_Cursor
   );

   type Column_Status_Type is mod 2 ** 32;

   CS_CANBENULL :       constant Column_Status_Type := 1;
   CS_HIDDEN :          constant Column_Status_Type := 2;
   CS_IDENTITY :        constant Column_Status_Type := 4;
   CS_KEY :             constant Column_Status_Type := 8;
   CS_VERSION_KEY :     constant Column_Status_Type := 16;
   CS_TIMESTAMP :       constant Column_Status_Type := 32;
   CS_UPDATEABLE :      constant Column_Status_Type := 64;
   CS_UPDATECOL :       constant Column_Status_Type := 128;
   CS_RETURN :          constant Column_Status_Type := 256;

   CS_MAX_NAME :        constant Positive := 128 + 4;

   Sy_Change_Database_Context : constant Message_Number_Type := 5701;      -- Database name message

   type Sy_Column_Type is
      record
         Name :         String(1..CS_MAX_NAME);    -- Column name, if any
         Name_Length :  Natural;                   -- 0 if there is no column name
         Data_Type :    Field_Type;                -- Column data format
         Status :       Column_Status_Type;        -- Column attributes
         Max_Length :   Natural;                   -- Maximum column size
         Scale :        Int_Type;                  -- Scale
         Precision :    Int_Type;                  -- Precision
         Str_Value :    String_Ptr;                -- String value of this column
      end record;

   type Sy_Columns_Array is array(Column_Index_Type range <>) of Sy_Column_Type;
   type Sy_Columns_Ptr is access all Sy_Columns_Array;

   type Get_Data_Type is (
      Get_Data_Failed,                 -- Call failed
      Not_Last_Chunk,                  -- Got data, but there is more to follow
      Last_Chunk                       -- Got last of the data
   );
   for Get_Data_Type use (
      Get_Data_Failed   => 0,
      Not_Last_Chunk    => 1,
      Last_Chunk        => 2
   );
   for Get_Data_Type'Size use 32;

   type Fetch_Return_Type is (
      Fetch_Row,
      Fetch_End,
      Fetch_Failed
   );
   for Fetch_Return_Type use (
      Fetch_Row         => 20,
      Fetch_End         => 21,
      Fetch_Failed      => 22
   );
   for Fetch_Return_Type'Size use 32;

   -- Sqlwarn(1)	when blank, all other warnings are blank, else 'W'
   -- Sqlwarn(2)	when 'W', then at least one column value was truncated, else blank
   -- Sqlwarn(3)	when 'W', then at least one null value was eliminated from a function argument
   -- Sqlwarn(4)	when 'W', then some but not all values were bound (only for CS_ANSI_BINDS)
   -- Sqlwarn(5)	when 'W', then a dynamic update/delete statement did not have a where clause
   -- Sqlwarn(6)	when 'W', then a server conversion or truncation error occurred

   type SQLCA_Type is new Ada.Finalization.Controlled with
      record
         Sqlcode :      SQL_Code_Type := 0;           -- SQL Code
         Sqlerrm :      String_Ptr;                   -- Error message or null
         Sqlerrp :      String(1..8) := "        ";   -- SQL stored procedure name 
         Rows_Affected: Long_Type := 0;               -- # of rows affected
         Sqlwarn :      String(1..6) := "      ";     -- SQL Warn structure
      --
         Post_Once :    Boolean := False;             -- When true, post only if Posted = False
         Posted :       Boolean := False;             -- Indicates if SQLCA has been posted
      end record;

   procedure Finalize(SQLCA : in out SQLCA_Type);

   type SQLCA_Ptr is access all SQLCA_Type;

   type Return_Status is range -2 ** 31 .. 2 ** 31 - 1;
   for Return_Status'Size use 32;

   type Sy_Error_Type is range -2 ** 31 .. 2 ** 31 - 1;

   type Sy_Context_Type is new System.Address;     -- SYBASE Context (CS_CONTEXT)
   type Sy_Conn_Type is new System.Address;        -- SYBASE Connection (CS_CONNECTION)
   type Sy_Cmd_Type is new System.Address;         -- SYBASE Command (CS_COMMAND)

   Null_Context :    constant Sy_Context_Type      := Sy_Context_Type(System.Null_Address);
   Null_Connection : constant Sy_Conn_Type         := Sy_Conn_Type(System.Null_Address);
   Null_Command :    constant Sy_Cmd_Type          := Sy_Cmd_Type(System.Null_Address);

   -- Sybase Options

   type Option_Argument_Type is (
      ARG_BOOLEAN,         -- Boolean (T or F)
      ARG_UINT,            -- Argument is unsigned int
      ARG_DAY_OF_WEEK,     -- Day of week set CS_OPT_SUNDAY..CS_OPT_SATURDAY
      ARG_DATEFORMAT,      -- One of CS_OPT_FMTMDY..CS_OPT_FMTDYM
      ARG_CHAR_PTR,        -- Argument is char pointer
      ARG_CHAR_PTR_NULL    -- Argument is char pointer but the value NULL is also permitted
   );

   type Sybase_Enum_Option is mod 2**32;

   type Sybase_Option is
      record
         Name :      String(1..18);
         Length :    Positive;
         Sybase_Enum: Sybase_Enum_Option;
         Argument :  Option_Argument_Type;
      end record;

   type Sybase_Options is array(Positive range <>) of Sybase_Option;

   Options : constant Sybase_Options := (
      %SYBASE_OPTIONS%
   );

   function Sy_Context_Of(Conn : Sy_Conn_Type) return Sy_Context_Type;
   function Sy_Connection_Of(Cmd : Sy_Cmd_Type) return Sy_Conn_Type;

--   procedure Get_SQLCA(Conn : Sy_Conn_Type; SQLCA : out SQLCA_Type);
   procedure Clear_SQLCA(SQLCA : in out SQLCA_Type);

   function Sy_Alloc_Context return Sy_Context_Type;
   procedure Sy_Free_Context(Ctx : in out Sy_Context_Type);
   function Sy_Alloc_Connection(Ctx : Sy_Context_Type; Conn : System.Address) return Sy_Conn_Type;
   procedure Sy_Free_Connection(Conn : in out Sy_Conn_type);

   function Sy_Set_Hostname(Conn : Sy_Conn_Type; Host : String_Ptr) return Boolean;
   function Sy_Set_Userid(Conn : Sy_Conn_Type; Userid : String_Ptr) return Boolean;
   function Sy_Set_Passwd(Conn : Sy_Conn_Type; Passwd : String_Ptr) return Boolean;
   function Sy_Set_Database(Conn : Sy_Conn_Type; Database : String_Ptr) return Boolean;
   function Sy_Connect(Conn : Sy_Conn_Type; Instance : String) return Boolean;
   function Sy_Disconnect(Conn : Sy_Conn_Type) return Boolean;

   function Sy_Exec(Conn : Sy_Conn_Type; SQL : String) return Sy_Cmd_Type;
   function Sy_Release(Cmd : Sy_Cmd_Type) return Sy_Cmd_Type;

   function Sy_Open_Cursor(
      Conn :         Sy_Conn_Type;     -- Sybase connection
      SQL :          String;           -- SQL text
      Cursor_Name :  System.Address;   -- Start of cursor name
      Name_Length :  Natural;          -- Length of cursor name
      For_Update :   Boolean           -- True if cursor is for update
   ) return Sy_Cmd_Type;

   function Sy_Close_Cursor(Cmd : Sy_Cmd_Type) return Boolean;

   procedure Sy_Results(Cmd : Sy_Cmd_Type; Results : out Result_Type; Columns : out Natural);
   function Sy_Is_Done(Cmd : Sy_Cmd_Type) return Boolean;
   function Sy_Is_End(Cmd : Sy_Cmd_Type) return Boolean;
   procedure Sy_Debug_Results(Cmd : Sy_Cmd_Type);

   function Sy_Fetch(Cmd : Sy_Cmd_Type) return Fetch_Return_Type;
   function Sy_Cancel(Cmd : Sy_Cmd_Type) return Sy_Cancel_Type;

   function Sy_Describe(Cmd : Sy_Cmd_Type; Columns : Positive) return Sy_Columns_Ptr;
   procedure Sy_Get_Data(Cmd : Sy_Cmd_Type; Values : in out Sy_Columns_Array);

   procedure Sy_Bool_Option(Conn : Sy_Conn_Type; E : Sybase_Enum_Option; Arg : Interfaces.C.int);
   procedure Sy_Uint_Option(Conn : Sy_Conn_Type; E : Sybase_Enum_Option; Arg : Interfaces.C.unsigned);
   procedure Sy_DOW_Option(Conn : Sy_Conn_Type; E : Sybase_Enum_Option; Arg : Interfaces.C.int);
   procedure Sy_Format_Option(Conn : Sy_Conn_Type; E : Sybase_Enum_Option; Arg : Interfaces.C.int);
   procedure Sy_String_Option(Conn : Sy_Conn_Type; E : Sybase_Enum_Option; Arg : System.Address);

   procedure Free is new Ada.Unchecked_Deallocation(SQLCA_Type,SQLCA_Ptr);
   procedure Free(Values : in out Sy_Columns_Ptr; Release_Array : Boolean := True);


   pragma import(C,Sy_Context_Of,"c_sy_context_of");
   pragma import(C,Sy_Connection_Of,"c_sy_connection_of");
   pragma import(C,Sy_Alloc_Context,"c_sy_alloc_context");
   pragma import(C,Sy_Alloc_Connection,"c_sy_alloc_connection");
   pragma import(C,Sy_Release,"c_sy_release");
   pragma import(C,Sy_Fetch,"c_sy_fetch");

end APQ.Sybase;

-- End $Source: /cvsroot/apq/apq/apq-sybase.ads-in,v $
