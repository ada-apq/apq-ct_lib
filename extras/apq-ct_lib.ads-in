------------------------------------------------------------------------------
--                                                                          --
--                          APQ DATABASE BINDINGS                           --
--                                                                          --
--                              A P Q - CT_LIB				    --
--                                                                          --
--                                 S p e c                                  --
--                                                                          --
--         Copyright (C) 2002-2007, Warren W. Gay VE3WWG                    --
--         Copyright (C) 2007-2009, Ada Works Project                       --
--                                                                          --
--                                                                          --
-- APQ is free software;  you can  redistribute it  and/or modify it under  --
-- terms of the  GNU General Public License as published  by the Free Soft- --
-- ware  Foundation;  either version 2,  or (at your option) any later ver- --
-- sion.  APQ is distributed in the hope that it will be useful, but WITH-  --
-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --
-- for  more details.  You should have  received  a copy of the GNU General --
-- Public License  distributed with APQ;  see file COPYING.  If not, write  --
-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --
-- MA 02111-1307, USA.                                                      --
--                                                                          --
-- As a special exception,  if other files  instantiate  generics from this --
-- unit, or you link  this unit with other files  to produce an executable, --
-- this  unit  does not  by itself cause  the resulting  executable  to  be --
-- covered  by the  GNU  General  Public  License.  This exception does not --
-- however invalidate  any other reasons why  the executable file  might be --
-- covered by the  GNU Public License.                                      --
------------------------------------------------------------------------------

-- ***********************************************************
-- WARNING: The APQ.CT_Lib package is generated. Apply changes
--          to input file apq-ct_lib.ads-in instead!!!!!!!!!!!
-- ***********************************************************

with Interfaces.C;

package APQ.CT_Lib is

	-- CT_LIB Linker Options

	--
	-- Results from a query execution :
	--
	type Result_Type is (
		Execution_Failed,                   -- ct_results() call failed
		No_Results,                         -- Command processed, but no results available
		Row_Results,                        -- Command processed, and row results exist for fetching
		Cursor_Results,                     -- Command processed, and cursor row results exist for fetching
		Info_Results,                       -- Command processed, but no row data, but info exists
		Compute_Results,                    -- Computed results
		Param_Results,                      -- Parameter results
		Status_Results                      -- Status results
	);
	for Result_Type use (
		Execution_Failed        => 0,
		No_Results              => 1,
		Row_Results             => 2,
		Cursor_Results          => 3,
		Info_Results            => 4,
		Compute_Results         => 5,
		Param_Results           => 6,
		Status_Results          => 7
	);
	for Result_Type'Size use 32;           -- Must be integer sized (see c_ct_lib.c)

	type Field_Type is (
 		%type:Field_Type%
	);
	for Field_Type use (
 		%for:Field_Type%
	);
	for Field_Type'Size use 32;

private

	No_Info : Exception;    -- No information to return

	Null_Row_ID : constant Row_ID_Type := 0;

	subtype U2_Type is Interfaces.C.Unsigned;
	subtype I1_Type is Interfaces.C.Signed_Char;
	subtype I2_Type is Interfaces.C.Short;
	subtype I4_Type is Interfaces.C.Int;
	type    I8_Type is range -2 ** 63 .. 2 ** 63 - 1;
	subtype R4_Type is Interfaces.C.C_Float;
	subtype R8_Type is Interfaces.C.Double;

	type Int_Type is range -2 ** 31 .. 2 ** 31 - 1;
	type Long_Type is range -2 ** 31 .. 2 ** 31 - 1;

	type Layer_Type is new Long_Type;
	type Origin_Type is new Long_Type;
	type Severity_Type is new Long_Type;
	type Message_Number_Type is new Long_Type;
	type State_Type is new Long_Type;
	type Line_Type is new Long_Type;

	type CT_Lib_Cancel_Type is (
 	Cancel_Failed,
 	Cancel_Succeeded,
 	Cancel_With_Open_Cursor
	);

	type Column_Status_Type is mod 2 ** 32;

	CS_CANBENULL :       constant Column_Status_Type := 1;
	CS_HIDDEN :          constant Column_Status_Type := 2;
	CS_IDENTITY :        constant Column_Status_Type := 4;
	CS_KEY :             constant Column_Status_Type := 8;
	CS_VERSION_KEY :     constant Column_Status_Type := 16;
	CS_TIMESTAMP :       constant Column_Status_Type := 32;
	CS_UPDATEABLE :      constant Column_Status_Type := 64;
	CS_UPDATECOL :       constant Column_Status_Type := 128;
	CS_RETURN :          constant Column_Status_Type := 256;

	CS_MAX_NAME :        constant Positive := 128 + 4;

	CT_Lib_Change_Database_Context : constant Message_Number_Type := 5701;      -- Database name message

	type CT_Lib_Column_Type is
 	record
		Name :         String(1..CS_MAX_NAME);    -- Column name, if any
		Name_Length :  Natural;                   -- 0 if there is no column name
		Data_Type :    Field_Type;                -- Column data format
		Status :       Column_Status_Type;        -- Column attributes
		Max_Length :   Natural;                   -- Maximum column size
		Scale :        Int_Type;                  -- Scale
		Precision :    Int_Type;                  -- Precision
		Str_Value :    String_Ptr;                -- String value of this column
 	end record;

	type CT_Lib_Columns_Array is array(Column_Index_Type range <>) of CT_Lib_Column_Type;
	type CT_Lib_Columns_Ptr is access all CT_Lib_Columns_Array;

	type Get_Data_Type is (
		Get_Data_Failed,                 -- Call failed
		Not_Last_Chunk,                  -- Got data, but there is more to follow
		Last_Chunk                       -- Got last of the data
	);
	for Get_Data_Type use (
		Get_Data_Failed   => 0,
		Not_Last_Chunk    => 1,
		Last_Chunk        => 2
	);
	for Get_Data_Type'Size use 32;

	type Fetch_Return_Type is (
		Fetch_Row,
		Fetch_End,
		Fetch_Failed
	);
	for Fetch_Return_Type use (
		Fetch_Row         => 20,
		Fetch_End         => 21,
		Fetch_Failed      => 22
	);
	for Fetch_Return_Type'Size use 32;

	-- Sqlwarn(1)	when blank, all other warnings are blank, else 'W'
	-- Sqlwarn(2)	when 'W', then at least one column value was truncated, else blank
	-- Sqlwarn(3)	when 'W', then at least one null value was eliminated from a function argument
	-- Sqlwarn(4)	when 'W', then some but not all values were bound (only for CS_ANSI_BINDS)
	-- Sqlwarn(5)	when 'W', then a dynamic update/delete statement did not have a where clause
	-- Sqlwarn(6)	when 'W', then a server conversion or truncation error occurred

	type SQLCA_Type is new Ada.Finalization.Controlled with
 	record
		Sqlcode :      SQL_Code_Type := 0;           -- SQL Code
		Sqlerrm :      String_Ptr;                   -- Error message or null
		Sqlerrp :      String(1..8) := "        ";   -- SQL stored procedure name 
		Rows_Affected: Long_Type := 0;               -- # of rows affected
		Sqlwarn :      String(1..6) := "      ";     -- SQL Warn structure
		--
		Post_Once :    Boolean := False;             -- When true, post only if Posted = False
		Posted :       Boolean := False;             -- Indicates if SQLCA has been posted
 	end record;

	procedure Finalize(SQLCA : in out SQLCA_Type);

	type SQLCA_Ptr is access all SQLCA_Type;

	type Return_Status is range -2 ** 31 .. 2 ** 31 - 1;
	for Return_Status'Size use 32;

	type CT_Lib_Error_Type is range -2 ** 31 .. 2 ** 31 - 1;

	type CT_Lib_Context_Type is new System.Address;     -- CT_Lib_lib Context (CS_CONTEXT)
	type CT_Lib_Conn_Type is new System.Address;        -- CT_Lib_lib Connection (CS_CONNECTION)
	type CT_Lib_Cmd_Type is new System.Address;         -- CT_Lib_lib Command (CS_COMMAND)

	Null_Context :    constant CT_Lib_Context_Type      := CT_Lib_Context_Type(System.Null_Address);
	Null_Connection : constant CT_Lib_Conn_Type         := CT_Lib_Conn_Type(System.Null_Address);
	Null_Command :    constant CT_Lib_Cmd_Type          := CT_Lib_Cmd_Type(System.Null_Address);

	-- CT_LIB Options

	type Option_Argument_Type is (
		ARG_BOOLEAN,         -- Boolean (T or F)
		ARG_UINT,            -- Argument is unsigned int
		ARG_DAY_OF_WEEK,     -- Day of week set CS_OPT_SUNDAY..CS_OPT_SATURDAY
		ARG_DATEFORMAT,      -- One of CS_OPT_FMTMDY..CS_OPT_FMTDYM
		ARG_CHAR_PTR,        -- Argument is char pointer
		ARG_CHAR_PTR_NULL    -- Argument is char pointer but the value NULL is also permitted
	);

	type CT_Lib_Enum_Option is mod 2**32;

	type CT_Lib_Option is
 	record
		Name :      String(1..18);
		Length :    Positive;
		CT_Lib_Enum: CT_Lib_Enum_Option;
		Argument :  Option_Argument_Type;
 	end record;

	type CT_Lib_Options is array(Positive range <>) of CT_Lib_Option;

	Options : constant CT_Lib_Options := (
		%CT_LIB_OPTIONS%
	);

	function CT_Lib_Context_Of(Conn : CT_Lib_Conn_Type) return CT_Lib_Context_Type;
	function CT_Lib_Connection_Of(Cmd : CT_Lib_Cmd_Type) return CT_Lib_Conn_Type;

--   procedure Get_SQLCA(Conn : CT_Lib_Conn_Type; SQLCA : out SQLCA_Type);
	procedure Clear_SQLCA(SQLCA : in out SQLCA_Type);

	function CT_Lib_Alloc_Context return CT_Lib_Context_Type;
	procedure CT_Lib_Free_Context(Ctx : in out CT_Lib_Context_Type);
	function CT_Lib_Alloc_Connection(Ctx : CT_Lib_Context_Type; Conn : System.Address) return CT_Lib_Conn_Type;
	procedure CT_Lib_Free_Connection(Conn : in out CT_Lib_Conn_type);

	function CT_Lib_Set_Hostname(Conn : CT_Lib_Conn_Type; Host : String_Ptr) return Boolean;
	function CT_Lib_Set_Userid(Conn : CT_Lib_Conn_Type; Userid : String_Ptr) return Boolean;
	function CT_Lib_Set_Passwd(Conn : CT_Lib_Conn_Type; Passwd : String_Ptr) return Boolean;
	function CT_Lib_Set_Database(Conn : CT_Lib_Conn_Type; Database : String_Ptr) return Boolean;
	function CT_Lib_Connect(Conn : CT_Lib_Conn_Type; Instance : String) return Boolean;
	function CT_Lib_Is_Connected(Conn : CT_Lib_Conn_Type) return Integer;
	function CT_Lib_Disconnect(Conn : CT_Lib_Conn_Type) return Boolean;

	function CT_Lib_Exec(Conn : CT_Lib_Conn_Type; SQL : String) return CT_Lib_Cmd_Type;
	function CT_Lib_Release(Cmd : CT_Lib_Cmd_Type) return CT_Lib_Cmd_Type;

	function CT_Lib_Open_Cursor(
		Conn :         CT_Lib_Conn_Type;     -- ct_lib connection
		SQL :          String;           -- SQL text
		Cursor_Name :  System.Address;   -- Start of cursor name
		Name_Length :  Natural;          -- Length of cursor name
		For_Update :   Boolean           -- True if cursor is for update
	) return CT_Lib_Cmd_Type;

	function CT_Lib_Close_Cursor(Cmd : CT_Lib_Cmd_Type) return Boolean;

	procedure CT_Lib_Results(Cmd : CT_Lib_Cmd_Type; Results : out Result_Type; Columns : out Natural);
	function CT_Lib_Is_Done(Cmd : CT_Lib_Cmd_Type) return Boolean;
	function CT_Lib_Is_End(Cmd : CT_Lib_Cmd_Type) return Boolean;
	procedure CT_Lib_Debug_Results(Cmd : CT_Lib_Cmd_Type);

	function CT_Lib_Fetch(Cmd : CT_Lib_Cmd_Type) return Fetch_Return_Type;
	function CT_Lib_Cancel(Cmd : CT_Lib_Cmd_Type) return CT_Lib_Cancel_Type;

	function CT_Lib_Describe(Cmd : CT_Lib_Cmd_Type; Columns : Positive) return CT_Lib_Columns_Ptr;
	procedure CT_Lib_Get_Data(Cmd : CT_Lib_Cmd_Type; Values : in out CT_Lib_Columns_Array);

	procedure CT_Lib_Bool_Option(Conn : CT_Lib_Conn_Type; E : CT_Lib_Enum_Option; Arg : Interfaces.C.int);
	procedure CT_Lib_Uint_Option(Conn : CT_Lib_Conn_Type; E : CT_Lib_Enum_Option; Arg : Interfaces.C.unsigned);
	procedure CT_Lib_DOW_Option(Conn : CT_Lib_Conn_Type; E : CT_Lib_Enum_Option; Arg : Interfaces.C.int);
	procedure CT_Lib_Format_Option(Conn : CT_Lib_Conn_Type; E : CT_Lib_Enum_Option; Arg : Interfaces.C.int);
	procedure CT_Lib_String_Option(Conn : CT_Lib_Conn_Type; E : CT_Lib_Enum_Option; Arg : System.Address);

	procedure Free is new Ada.Unchecked_Deallocation(SQLCA_Type,SQLCA_Ptr);
	procedure Free(Values : in out CT_Lib_Columns_Ptr; Release_Array : Boolean := True);


	pragma import(C,CT_Lib_Context_Of,"c_ct_lib_context_of");
	pragma import(C,CT_Lib_Connection_Of,"c_ct_lib_connection_of");
	pragma import(C,CT_Lib_Alloc_Context,"c_ct_lib_alloc_context");
	pragma import(C,CT_Lib_Alloc_Connection,"c_ct_lib_alloc_connection");
	pragma import(C,CT_Lib_Is_Connected, "c_ct_lib_is_connected");
	pragma import(C,CT_Lib_Release,"c_ct_lib_release");
	pragma import(C,CT_Lib_Fetch,"c_ct_lib_fetch");

end APQ.CT_Lib;

-- End $Source: /cvsroot/apq/apq/apq-ct_lib.ads-in,v $
